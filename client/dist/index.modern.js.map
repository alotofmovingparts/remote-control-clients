{"version":3,"file":"index.modern.js","sources":["../src/index.ts"],"sourcesContent":["import { v4 as uuid } from 'uuid';\n\ntype UUID = string;\n\ninterface ClientMessage {\n  type: string;\n  uuid: UUID;\n}\n\ninterface ClientConnectMessage extends ClientMessage {\n  type: \"connect\";\n}\n\ninterface ClientSetMessage extends ClientMessage {\n  type: \"set\";\n  values: { [name: string]: string; }\n}\n\ninterface ClientReadMessage extends ClientMessage {\n  type: \"read\";\n  names?: string[];\n}\n\ninterface ClientClientsMessage extends ClientMessage {\n  type: \"clients\";\n}\n\ninterface ServerMessage {\n  type: string;\n}\n\ninterface ServerSetResponseMessage extends ServerMessage {\n  type: \"set_response\";\n  uuid: UUID;\n}\n\ninterface ServerReadResponseMessage extends ServerMessage {\n  type: \"read_response\";\n  values: { [name: string]: string; }\n  uuid: UUID;\n}\n\ninterface ServerClientsResponseMessage extends ServerMessage {\n  type: \"clients_response\";\n  clients: string[];\n  uuid: UUID;\n}\n\ninterface ServerConnectMessage extends ServerMessage {\n  type: \"connect_response\";\n  initialValues: { [name: string]: string; }\n  clients: string[];\n  uuid: UUID;\n}\n\ninterface ServerUpdateMessage extends ServerMessage {\n  type: \"update\";\n  values: { [name: string]: string; }\n  clients: string[];\n}\n\ninterface ServerErrorMessage extends ServerMessage {\n  type: \"error\";\n  message: string;\n  uuid?: UUID;\n}\n\n\ntype TouchControlEventType = \"connect\" | \"disconnect\" | \"update\" | \"error\";\n\nenum TouchControlClientState {\n  Connecting = \"CONNECTING\",\n  Connected = \"CONNECTED\",\n  Disconnected = \"DISCONNECTED\"\n}\n\nexport default class TouchControlClient extends EventTarget {\n  url: string;\n  ws?: WebSocket;\n  state: TouchControlClientState;\n  _callbacks: { [id: UUID]: (err: Error | null, ...args: any) => void }\n\n  constructor(url: string) {\n    super();\n    this.url = url;\n    this.state = TouchControlClientState.Disconnected;\n    this._callbacks = {};\n  }\n\n  connect(callback?: (err?: Error | null, initialValues?: any, clients?: any) => void) {\n    this.state = TouchControlClientState.Connecting;\n    this.ws = new WebSocket(this.url);\n    this.ws.onopen = (event: Event) => {\n      const id = uuid();\n      if (callback) this._callbacks[id] = callback;\n      const message: ClientConnectMessage = {\n        type: \"connect\",\n        uuid: id\n      }\n      this.ws?.send(JSON.stringify(message));\n    }\n    this.ws.onclose = (event: CloseEvent) => {\n      this.state = TouchControlClientState.Disconnected;\n      this.dispatchEvent(new CustomEvent('disconnect'));\n    };\n    this.ws.onmessage = (event: MessageEvent) => {\n      const data = JSON.parse(event.data) as ServerMessage;\n\n      let message:\n        ServerSetResponseMessage |\n        ServerReadResponseMessage |\n        ServerClientsResponseMessage |\n        ServerConnectMessage |\n        ServerUpdateMessage |\n        ServerErrorMessage;\n      switch (data.type) {\n        case \"set_response\":\n          message = data as ServerSetResponseMessage;\n          if (message.uuid in this._callbacks) {\n            const callback = this._callbacks[message.uuid]\n            delete this._callbacks[message.uuid];\n            callback(null);\n          }\n          break;\n        case \"read_response\":\n          message = data as ServerReadResponseMessage;\n          if (message.uuid in this._callbacks) {\n            const callback = this._callbacks[message.uuid]\n            delete this._callbacks[message.uuid];\n            const keys = Object.keys(message.values);\n            if (keys.length > 1) {\n              callback(null, message.values);\n            } else {\n              const name = keys[0];\n              callback(null, message.values[name]);\n            }            \n          }\n          break;\n        case \"clients_response\":\n          message = data as ServerClientsResponseMessage;\n          if (message.uuid in this._callbacks) {\n            const callback = this._callbacks[message.uuid]\n            delete this._callbacks[message.uuid];\n            callback(null, message.clients);\n          }\n          break;\n        case \"connect_response\":\n          message = data as ServerConnectMessage;\n          this.state = TouchControlClientState.Connected;\n          if (message.uuid in this._callbacks) {\n            const callback = this._callbacks[message.uuid]\n            delete this._callbacks[message.uuid];\n            callback(null, message.initialValues, message.clients);\n          }\n          this.dispatchEvent(new CustomEvent('connect', { detail: message}));\n          break;\n        case \"update\":\n          message = data as ServerUpdateMessage;\n          this.dispatchEvent(new CustomEvent('update', { detail: message}));\n          break;\n        case \"error\":\n          message = data as ServerErrorMessage;\n          if (message.uuid && message.uuid in this._callbacks) {\n            const callback = this._callbacks[message.uuid]\n            delete this._callbacks[message.uuid];\n            callback(new Error(message.message));\n          }\n          this.dispatchEvent(new CustomEvent('error', { detail: message}));\n          break;\n        default:\n          break;\n      }\n    };\n    this.ws.onerror = (event: Event) => {\n      const message: ServerErrorMessage = {\n        type: \"error\",\n        message: String(event)\n      }\n      this.dispatchEvent(new CustomEvent('error', { detail: message}));\n    };\n  }\n\n  set(name: string, value: any, callback?: (err: Error | null) => void) {\n    const id = uuid();\n    if (callback) this._callbacks[id] = callback;\n    const message: ClientSetMessage = {\n      type: \"set\",\n      values: {\n        value\n      },\n      uuid: id\n    }\n    this.ws?.send(JSON.stringify(message));\n  }\n\n  read(name?: string, callback?: (err: Error | null, value?: string | { [name: string]: string; }) => void) {\n    const id = uuid();\n    if (callback) this._callbacks[id] = callback;\n    const names = name ? [name] : [];\n    const message: ClientReadMessage = {\n      type: \"read\",\n      names,\n      uuid: id\n    }\n    this.ws?.send(JSON.stringify(message));\n  }\n  \n  clients(callback?: (err: Error | null) => void) {\n    const id = uuid();\n    if (callback) this._callbacks[id] = callback;\n    const message: ClientClientsMessage = {\n      type: \"clients\",\n      uuid: id\n    }\n    this.ws?.send(JSON.stringify(message));\n  }\n\n  disconnect() {\n    this.ws?.close();\n  }\n\n  // Custom event, put shape of expected data into detail, process event listener so that on callback has the right stuff\n  // on(type: TouchControlEventType, callback: EventListenerOrEventListenerObject | null, options?: boolean | AddEventListenerOptions): void {\n  //   return this.addEventListener(type, callback, options);\n  // }\n\n  // off(type: TouchControlEventType, callback: EventListenerOrEventListenerObject | null, options?: EventListenerOptions | boolean): void {\n  //   return this.removeEventListener(type, callback, options);\n  // }\n\n}"],"names":["TouchControlClientState","TouchControlClient","EventTarget","constructor","url","super","ws","state","_callbacks","this","Disconnected","connect","callback","Connecting","WebSocket","onopen","event","id","uuid","send","JSON","stringify","type","onclose","dispatchEvent","CustomEvent","onmessage","data","parse","message","keys","Object","values","length","clients","Connected","initialValues","detail","Error","onerror","String","set","name","value","read","names","disconnect","close"],"mappings":"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"}