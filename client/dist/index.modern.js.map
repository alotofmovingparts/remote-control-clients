{"version":3,"file":"index.modern.js","sources":["../src/index.ts"],"sourcesContent":["export interface Message {\n  type: string;\n}\n\nenum TouchControlClientState {\n  Connecting = \"CONNECTING\",\n  Open = \"OPEN\",\n  Closed = \"CLOSED\"\n}\n\nexport default class TouchControlClient extends EventTarget {\n  url: string;\n  ws?: WebSocket;\n  state: TouchControlClientState;\n\n  constructor(url: string) {\n    super();\n    this.url = url;\n    this.state = TouchControlClientState.Closed;\n    this.addEventListener('message', (event: Event) => console.log(event));\n  }\n\n  connect(callback?: (err: Error | null, initialValues: any, clients: any) => void) {\n    this.state = TouchControlClientState.Connecting;\n    this.ws = new WebSocket(this.url);\n    this.ws.onopen = (event: Event) => {\n      this.state = TouchControlClientState.Open;\n      const e = new Event('open');\n      this.dispatchEvent(e);\n    };\n    this.ws.onclose = (event: CloseEvent) => {\n      this.state = TouchControlClientState.Closed;\n      const e = new CloseEvent('close', {code: event.code});\n      this.dispatchEvent(e);\n    };\n    this.ws.onmessage = (event: MessageEvent) => {\n      const e = new MessageEvent('message', { data: event.data})\n      this.dispatchEvent(e);\n    };\n    this.ws.onerror = (event: Event) => {\n      this.dispatchEvent(event);\n    };\n    const e = new Event('connecting');\n    this.dispatchEvent(e);\n  }\n\n  sendValue(name: string, value: any, callback?: (err?: Error | null) => void) {\n    this.ws?.send(JSON.stringify({name, value}));\n  }\n\n  on(type: string, callback: EventListenerOrEventListenerObject | null, options?: boolean | AddEventListenerOptions): void {\n    return this.addEventListener(type, callback, options);\n  }\n\n  off(type: string, callback: EventListenerOrEventListenerObject | null, options?: EventListenerOptions | boolean): void {\n    return this.removeEventListener(type, callback, options);\n  }\n\n}"],"names":["TouchControlClientState","TouchControlClient","EventTarget","constructor","url","super","ws","state","this","Closed","addEventListener","event","console","log","connect","callback","Connecting","WebSocket","onopen","Open","e","Event","dispatchEvent","onclose","CloseEvent","code","onmessage","MessageEvent","data","onerror","sendValue","name","value","send","JSON","stringify","on","type","options","off","removeEventListener"],"mappings":"AAIA,IAAKA,GAAL,SAAKA,GACHA,0BACAA,cACAA,kBAHF,CAAKA,IAAAA,aAMgBC,UAA2BC,YAK9CC,YAAYC,GACVC,aALFD,gBACAE,eACAC,aAIEC,KAAKJ,IAAMA,EACXI,KAAKD,MAAQP,EAAwBS,OACrCD,KAAKE,iBAAiB,UAAYC,GAAiBC,QAAQC,IAAIF,IAGjEG,QAAQC,GACNP,KAAKD,MAAQP,EAAwBgB,WACrCR,KAAKF,GAAK,IAAIW,UAAUT,KAAKJ,KAC7BI,KAAKF,GAAGY,OAAUP,IAChBH,KAAKD,MAAQP,EAAwBmB,KACrC,MAAMC,EAAI,IAAIC,MAAM,QACpBb,KAAKc,cAAcF,IAErBZ,KAAKF,GAAGiB,QAAWZ,IACjBH,KAAKD,MAAQP,EAAwBS,OACrC,MAAMW,EAAI,IAAII,WAAW,QAAS,CAACC,KAAMd,EAAMc,OAC/CjB,KAAKc,cAAcF,IAErBZ,KAAKF,GAAGoB,UAAaf,IACnB,MAAMS,EAAI,IAAIO,aAAa,UAAW,CAAEC,KAAMjB,EAAMiB,OACpDpB,KAAKc,cAAcF,IAErBZ,KAAKF,GAAGuB,QAAWlB,IACjBH,KAAKc,cAAcX,IAErB,MAAMS,EAAI,IAAIC,MAAM,cACpBb,KAAKc,cAAcF,GAGrBU,UAAUC,EAAcC,EAAYjB,uBAC7BT,OAAI2B,KAAKC,KAAKC,UAAU,CAACJ,KAAAA,EAAMC,MAAAA,KAGtCI,GAAGC,EAActB,EAAqDuB,GACpE,YAAY5B,iBAAiB2B,EAAMtB,EAAUuB,GAG/CC,IAAIF,EAActB,EAAqDuB,GACrE,YAAYE,oBAAoBH,EAAMtB,EAAUuB"}