{"version":3,"file":"index.modern.js","sources":["../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/stringify.js","../src/index.ts","../node_modules/uuid/dist/esm-browser/v4.js"],"sourcesContent":["// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import { v4 as uuid } from 'uuid';\n\ntype UUID = string;\n\ninterface ClientMessage {\n  type: string;\n  uuid: UUID;\n}\n\ninterface ClientConnectMessage extends ClientMessage {\n  type: \"connect\";\n}\n\ninterface ClientSetMessage extends ClientMessage {\n  type: \"set\";\n  values: { [name: string]: string; }\n}\n\ninterface ClientReadMessage extends ClientMessage {\n  type: \"read\";\n  names: string[];\n}\n\ninterface ClientClientsMessage extends ClientMessage {\n  type: \"clients\";\n}\n\ninterface ServerMessage {\n  type: string;\n}\n\ninterface ServerSetResponseMessage extends ServerMessage {\n  type: \"set_response\";\n  uuid: UUID;\n}\n\ninterface ServerReadResponseMessage extends ServerMessage {\n  type: \"read_response\";\n  values: { [name: string]: string; }\n  uuid: UUID;\n}\n\ninterface ServerClientsResponseMessage extends ServerMessage {\n  type: \"clients_response\";\n  clients: string[];\n  uuid: UUID;\n}\n\ninterface ServerConnectMessage extends ServerMessage {\n  type: \"connect_response\";\n  initialValues: { [name: string]: string; }\n  clients: string[];\n  uuid: UUID;\n}\n\ninterface ServerUpdateMessage extends ServerMessage {\n  type: \"update\";\n  values: { [name: string]: string; }\n  clients: string[];\n}\n\ninterface ServerErrorMessage extends ServerMessage {\n  type: \"error\";\n  message: string;\n  uuid?: UUID;\n}\n\n\ntype TouchControlEventType = \"connect\" | \"disconnect\" | \"update\" | \"error\";\n\nenum TouchControlClientState {\n  Connecting = \"CONNECTING\",\n  Connected = \"CONNECTED\",\n  Disconnected = \"DISCONNECTED\"\n}\n\nexport default class TouchControlClient extends EventTarget {\n  url: string;\n  ws?: WebSocket;\n  state: TouchControlClientState;\n  _callbacks: { [id: UUID]: (err: Error | null, ...args: any) => void }\n\n  constructor(url: string) {\n    super();\n    this.url = url;\n    this.state = TouchControlClientState.Disconnected;\n    this._callbacks = {};\n  }\n\n  connect(callback?: (err: Error | null, initialValues?: any, clients?: any) => void) {\n    this.state = TouchControlClientState.Connecting;\n    this.ws = new WebSocket(this.url);\n    this.ws.onopen = (event: Event) => {\n      const id = uuid();\n      if (callback) this._callbacks[id] = callback;\n      const message: ClientConnectMessage = {\n        type: \"connect\",\n        uuid: id\n      }\n      this.ws?.send(JSON.stringify(message));\n    }\n    this.ws.onclose = (event: CloseEvent) => {\n      this.state = TouchControlClientState.Disconnected;\n      this.dispatchEvent(new CustomEvent('disconnect'));\n    };\n    this.ws.onmessage = (event: MessageEvent) => {\n      const data = JSON.parse(event.data) as ServerMessage;\n      let message:\n        ServerSetResponseMessage |\n        ServerReadResponseMessage |\n        ServerClientsResponseMessage |\n        ServerConnectMessage |\n        ServerUpdateMessage |\n        ServerErrorMessage;\n      switch (data.type) {\n        case \"set_response\":\n          message = data as ServerSetResponseMessage;\n          if (message.uuid in this._callbacks) {\n            const callback = this._callbacks[message.uuid]\n            delete this._callbacks[message.uuid];\n            callback(null);\n          }\n          break;\n        case \"read_response\":\n          message = data as ServerReadResponseMessage;\n          if (message.uuid in this._callbacks) {\n            const callback = this._callbacks[message.uuid]\n            delete this._callbacks[message.uuid];\n            const keys = Object.keys(message.values);\n            if (keys.length > 1) {\n              callback(null, message.values);\n            } else {\n              const name = keys[0];\n              callback(null, message.values[name]);\n            }            \n          }\n          break;\n        case \"clients_response\":\n          message = data as ServerClientsResponseMessage;\n          if (message.uuid in this._callbacks) {\n            const callback = this._callbacks[message.uuid]\n            delete this._callbacks[message.uuid];\n            callback(null, message.clients);\n          }\n          break;\n        case \"connect_response\":\n          message = data as ServerConnectMessage;\n          this.state = TouchControlClientState.Connected;\n          if (message.uuid in this._callbacks) {\n            const callback = this._callbacks[message.uuid]\n            delete this._callbacks[message.uuid];\n            callback(null, message.initialValues, message.clients);\n          }\n          this.dispatchEvent(new CustomEvent('connect', { detail: message}));\n          break;\n        case \"update\":\n          message = data as ServerUpdateMessage;\n          this.dispatchEvent(new CustomEvent('update', { detail: message}));\n          break;\n        case \"error\":\n          message = data as ServerErrorMessage;\n          if (message.uuid && message.uuid in this._callbacks) {\n            const callback = this._callbacks[message.uuid]\n            delete this._callbacks[message.uuid];\n            callback(new Error(message.message));\n          }\n          this.dispatchEvent(new CustomEvent('error', { detail: message}));\n          break;\n        default:\n          break;\n      }\n    };\n    this.ws.onerror = (event: Event) => {\n      const message: ServerErrorMessage = {\n        type: \"error\",\n        message: String(event)\n      }\n      this.dispatchEvent(new CustomEvent('error', { detail: message}));\n    };\n  }\n\n  set(name: string, value: any, callback?: (err: Error | null) => void) {\n    const id = uuid();\n    if (callback) this._callbacks[id] = callback;\n    const message: ClientSetMessage = {\n      type: \"set\",\n      values: {\n        [name]: value\n      },\n      uuid: id\n    }\n    this.ws?.send(JSON.stringify(message));\n  }\n\n  read(name?: string, callback?: (err: Error | null, value?: string | { [name: string]: string; }) => void) {\n    const id = uuid();\n    if (callback) this._callbacks[id] = callback;\n    const names = name ? [name] : [];\n    const message: ClientReadMessage = {\n      type: \"read\",\n      names,\n      uuid: id\n    }\n    this.ws?.send(JSON.stringify(message));\n  }\n  \n  clients(callback?: (err: Error | null) => void) {\n    const id = uuid();\n    if (callback) this._callbacks[id] = callback;\n    const message: ClientClientsMessage = {\n      type: \"clients\",\n      uuid: id\n    }\n    this.ws?.send(JSON.stringify(message));\n  }\n\n  disconnect() {\n    this.ws?.close();\n  }\n}","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;"],"names":["getRandomValues","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","test","TouchControlClientState","byteToHex","i","push","toString","substr","v4","options","buf","offset","rnds","random","arr","arguments","length","undefined","toLowerCase","TypeError","stringify","TouchControlClient","EventTarget","constructor","url","super","ws","state","_callbacks","this","Disconnected","connect","callback","Connecting","WebSocket","onopen","event","id","send","JSON","type","onclose","dispatchEvent","CustomEvent","onmessage","data","parse","message","keys","Object","values","clients","Connected","initialValues","detail","onerror","String","set","name","value","read","names","disconnect","close"],"mappings":"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"}