{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["export interface Message {\n  type: string;\n}\n\nenum TouchControlClientState {\n  Connecting = \"CONNECTING\",\n  Open = \"OPEN\",\n  Closed = \"CLOSED\"\n}\n\nexport default class TouchControlClient extends EventTarget {\n  url: string;\n  ws?: WebSocket;\n  state: TouchControlClientState;\n\n  constructor(url: string) {\n    super();\n    this.url = url;\n    this.state = TouchControlClientState.Closed;\n    this.addEventListener('message', (event: Event) => console.log(event));\n  }\n\n  connect(callback?: (err: Error | null, initialValues: any, clients: any) => void) {\n    this.state = TouchControlClientState.Connecting;\n    this.ws = new WebSocket(this.url);\n    this.ws.onopen = (event: Event) => {\n      this.state = TouchControlClientState.Open;\n      const e = new Event('open');\n      this.dispatchEvent(e);\n    };\n    this.ws.onclose = (event: CloseEvent) => {\n      this.state = TouchControlClientState.Closed;\n      const e = new CloseEvent('close', {code: event.code});\n      this.dispatchEvent(e);\n    };\n    this.ws.onmessage = (event: MessageEvent) => {\n      const e = new MessageEvent('message', { data: event.data})\n      this.dispatchEvent(e);\n    };\n    this.ws.onerror = (event: Event) => {\n      this.dispatchEvent(event);\n    };\n    const e = new Event('connecting');\n    this.dispatchEvent(e);\n  }\n\n  sendValue(name: string, value: any, callback?: (err?: Error | null) => void) {\n    this.ws?.send(JSON.stringify({name, value}));\n  }\n\n  on(type: string, callback: EventListenerOrEventListenerObject | null, options?: boolean | AddEventListenerOptions): void {\n    return this.addEventListener(type, callback, options);\n  }\n\n  off(type: string, callback: EventListenerOrEventListenerObject | null, options?: EventListenerOptions | boolean): void {\n    return this.removeEventListener(type, callback, options);\n  }\n\n}"],"names":["TouchControlClientState","url","_this","ws","state","Closed","addEventListener","event","console","log","connect","callback","this","Connecting","WebSocket","onopen","_this2","Open","e","Event","dispatchEvent","onclose","CloseEvent","code","onmessage","MessageEvent","data","onerror","sendValue","name","value","send","JSON","stringify","on","type","options","off","removeEventListener","EventTarget"],"mappings":"o2CAIA,IAAKA,SAAL,SAAKA,GACHA,0BACAA,cACAA,kBAHF,CAAKA,IAAAA,wCAWH,WAAYC,gBACVC,sBALFD,aACAE,YACAC,aAIEF,EAAKD,IAAMA,EACXC,EAAKE,MAAQJ,EAAwBK,OACrCH,EAAKI,iBAAiB,UAAW,SAACC,UAAiBC,QAAQC,IAAIF,kHAGjEG,QAAA,SAAQC,cACNC,KAAKR,MAAQJ,EAAwBa,WACrCD,KAAKT,GAAK,IAAIW,UAAUF,KAAKX,KAC7BW,KAAKT,GAAGY,OAAS,SAACR,GAChBS,EAAKZ,MAAQJ,EAAwBiB,KACrC,IAAMC,EAAI,IAAIC,MAAM,QACpBH,EAAKI,cAAcF,IAErBN,KAAKT,GAAGkB,QAAU,SAACd,GACjBS,EAAKZ,MAAQJ,EAAwBK,OACrC,IAAMa,EAAI,IAAII,WAAW,QAAS,CAACC,KAAMhB,EAAMgB,OAC/CP,EAAKI,cAAcF,IAErBN,KAAKT,GAAGqB,UAAY,SAACjB,GACnB,IAAMW,EAAI,IAAIO,aAAa,UAAW,CAAEC,KAAMnB,EAAMmB,OACpDV,EAAKI,cAAcF,IAErBN,KAAKT,GAAGwB,QAAU,SAACpB,GACjBS,EAAKI,cAAcb,IAErB,IAAMW,EAAI,IAAIC,MAAM,cACpBP,KAAKQ,cAAcF,MAGrBU,UAAA,SAAUC,EAAcC,EAAYnB,uBAC7BR,OAAI4B,KAAKC,KAAKC,UAAU,CAACJ,KAAAA,EAAMC,MAAAA,QAGtCI,GAAA,SAAGC,EAAcxB,EAAqDyB,GACpE,YAAY9B,iBAAiB6B,EAAMxB,EAAUyB,MAG/CC,IAAA,SAAIF,EAAcxB,EAAqDyB,GACrE,YAAYE,oBAAoBH,EAAMxB,EAAUyB,sBA7CJG"}