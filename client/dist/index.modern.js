import{v4 as s}from"uuid";var t;!function(s){s.Connecting="CONNECTING",s.Connected="CONNECTED",s.Disconnected="DISCONNECTED"}(t||(t={}));class e extends EventTarget{constructor(s){super(),this.url=void 0,this.ws=void 0,this.state=void 0,this._callbacks=void 0,this.url=s,this.state=t.Disconnected,this._callbacks={}}connect(e){this.state=t.Connecting,this.ws=new WebSocket(this.url),this.ws.onopen=t=>{var i;const n=s();e&&(this._callbacks[n]=e),null==(i=this.ws)||i.send(JSON.stringify({type:"connect",uuid:n}))},this.ws.onclose=s=>{this.state=t.Disconnected,this.dispatchEvent(new CustomEvent("disconnect"))},this.ws.onmessage=s=>{const e=JSON.parse(s.data);let i;switch(e.type){case"set_response":if(i=e,i.uuid in this._callbacks){const s=this._callbacks[i.uuid];delete this._callbacks[i.uuid],s(null)}break;case"read_response":if(i=e,i.uuid in this._callbacks){const s=this._callbacks[i.uuid];delete this._callbacks[i.uuid];const t=Object.keys(i.values);s(null,t.length>1?i.values:i.values[t[0]])}break;case"clients_response":if(i=e,i.uuid in this._callbacks){const s=this._callbacks[i.uuid];delete this._callbacks[i.uuid],s(null,i.clients)}break;case"connect_response":if(i=e,this.state=t.Connected,i.uuid in this._callbacks){const s=this._callbacks[i.uuid];delete this._callbacks[i.uuid],s(null,i.initialValues,i.clients)}this.dispatchEvent(new CustomEvent("connect",{detail:i}));break;case"update":i=e,this.dispatchEvent(new CustomEvent("update",{detail:i}));break;case"error":if(i=e,i.uuid&&i.uuid in this._callbacks){const s=this._callbacks[i.uuid];delete this._callbacks[i.uuid],s(new Error(i.message))}this.dispatchEvent(new CustomEvent("error",{detail:i}))}},this.ws.onerror=s=>{const t={type:"error",message:String(s)};this.dispatchEvent(new CustomEvent("error",{detail:t}))}}set(t,e,i){var n;const c=s();i&&(this._callbacks[c]=i),null==(n=this.ws)||n.send(JSON.stringify({type:"set",values:{value:e},uuid:c}))}read(t,e){var i;const n=s();e&&(this._callbacks[n]=e),null==(i=this.ws)||i.send(JSON.stringify({type:"read",names:t?[t]:[],uuid:n}))}clients(t){var e;const i=s();t&&(this._callbacks[i]=t),null==(e=this.ws)||e.send(JSON.stringify({type:"clients",uuid:i}))}disconnect(){var s;null==(s=this.ws)||s.close()}}export{e as default};
//# sourceMappingURL=index.modern.js.map
